// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/events": {
            "post": {
                "summary": "Create event and init seats",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateEventResponse"
                        }
                    }
                }
            }
        },
        "/admin/venues": {
            "post": {
                "summary": "Create venue",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateVenueRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateVenueResponse"
                        }
                    }
                }
            }
        },
        "/admin/venues/{id}/seats": {
            "post": {
                "summary": "Batch create seats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "payload",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpgin.BatchCreateSeatsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "summary": "Get event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Event"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/availability": {
            "get": {
                "summary": "Get availability counters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.EventCounts"
                        }
                    }
                }
            }
        },
        "/events/{id}/holds": {
            "post": {
                "summary": "Create hold (idempotent)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "payload",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateHoldRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/httpgin.CreateHoldResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "seats unavailable / idem in progress",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "rate limited",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/seats": {
            "get": {
                "summary": "List event seats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "available",
                        "name": "only",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.SeatWithStatus"
                            }
                        }
                    }
                }
            }
        },
        "/orders/confirm": {
            "post": {
                "summary": "Confirm order",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpgin.ConfirmOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ConfirmOrderResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httpgin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "summary": "Get order with tickets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.OrderWithTickets"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Event": {
            "type": "object",
            "properties": {
                "ends": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "starts": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "venueID": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "domain.EventCounts": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer",
                    "format": "int64"
                },
                "held": {
                    "type": "integer",
                    "format": "int64"
                },
                "sold": {
                    "type": "integer",
                    "format": "int64"
                },
                "total": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "domain.Order": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "eventID": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "totalCents": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "domain.OrderWithTickets": {
            "type": "object",
            "properties": {
                "order": {
                    "$ref": "#/definitions/domain.Order"
                },
                "tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Ticket"
                    }
                }
            }
        },
        "domain.SeatStatus": {
            "type": "string",
            "enum": [
                "available",
                "held",
                "sold"
            ],
            "x-enum-varnames": [
                "SeatAvailable",
                "SeatHeld",
                "SeatSold"
            ]
        },
        "domain.SeatWithStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "number": {
                    "type": "integer"
                },
                "row": {
                    "type": "string"
                },
                "section": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/domain.SeatStatus"
                },
                "venueID": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "domain.Ticket": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "eventID": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "orderID": {
                    "type": "string"
                },
                "seatID": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "httpgin.BatchCreateSeatsRequest": {
            "type": "object",
            "required": [
                "seats"
            ],
            "properties": {
                "seats": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/httpgin.SeatInput"
                    }
                }
            }
        },
        "httpgin.ConfirmOrderRequest": {
            "type": "object",
            "required": [
                "hold_id",
                "total_cents"
            ],
            "properties": {
                "hold_id": {
                    "type": "string"
                },
                "total_cents": {
                    "type": "integer"
                }
            }
        },
        "httpgin.ConfirmOrderResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                }
            }
        },
        "httpgin.CreateEventRequest": {
            "type": "object",
            "required": [
                "ends_at",
                "starts_at",
                "title",
                "venue_id"
            ],
            "properties": {
                "ends_at": {
                    "type": "string"
                },
                "starts_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer"
                }
            }
        },
        "httpgin.CreateEventResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                }
            }
        },
        "httpgin.CreateHoldRequest": {
            "type": "object",
            "required": [
                "seat_ids",
                "user_id"
            ],
            "properties": {
                "seat_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "ttl_sec": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "httpgin.CreateHoldResponse": {
            "type": "object",
            "properties": {
                "hold_id": {
                    "type": "string"
                }
            }
        },
        "httpgin.CreateVenueRequest": {
            "type": "object"
        },
        "httpgin.CreateVenueResponse": {
            "type": "object",
            "properties": {
                "venue_id": {
                    "type": "integer"
                }
            }
        },
        "httpgin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "httpgin.SeatInput": {
            "type": "object",
            "required": [
                "number",
                "row",
                "section"
            ],
            "properties": {
                "number": {
                    "type": "integer"
                },
                "row": {
                    "type": "string"
                },
                "section": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "TixGo API",
	Description:      "This is a sample server for a ticketing service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
